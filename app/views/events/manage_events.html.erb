<div class="flash-message-container">
  <%= render 'shared/flash_message' %>
</div>

<% if logged_in? %>
  <div class="loggedin-breadcrumbs">
    <%= render_breadcrumbs separator: ' > ' %>
  </div>

  <%= render 'shared/modal' %>

  <div class="title-container">
    <h1 class="title">イベント管理</h1>
  </div>

  <% if @manage_events.present? %>
    <div class="event-list-container <%= @manage_events.size == 1 ? 'card-one' : '' %>">
      <% @manage_events.each do |event| %>
        <div class="card shadow p-3 mb-5 bg-white rounded" id="event-card" data-event-id="<%= event.id %>" data-event-name="<%= event.name %>" data-message="を削除しますか？">
          <div class="card__inner">
            <% if event.image.attached? %>
              <%= image_tag event.image, class:"card__image" %>
            <% else %>
              <%= image_tag 'events/no_image.png', class:"card__image" %>
            <% end %>
            <div class="card__textbox">
              <div class="card__title">
                <%= event.name.truncate(33) %>
              </div>
              <div class="card__items">
                <%= link_to manage_category_events_path(category_id: event.category.id), class: "category-label", data: { turbo:false } do %>
                  <%= event.category.name.truncate(18) %>
                <% end %>
                <%= link_to manage_date_events_path(event_day: event.event_day), class:"eventday-container", data: { turbo:false } do %>
                  <p class="eventday-label">開催日:<span class="eventday-value"><%= event.event_day.strftime("%-m月%-d日") %></span></p>
                <% end %>
                <div class="card__button">
                  <%= link_to edit_event_path(event), class: 'edit-button text-dark', data: { turbo: false } do %>
                    <i class="fa fa-pencil-square-o" aria-hidden="true"></i>
                  <% end %>
                  <%= button_tag id:"event-trash-icon", class: "trash-icon text-dark btn outline btn-primary", data: { bs_toggle: "modal", bs_target: "#deleteModal", turbo: false } do %>
                    <i class="fa fa-trash" aria-hidden="true"></i>
                  <% end %>
                </div>
              </div>
            </div>
          </div>
        </div>
      <% end %>
    </div>
    <%= paginate @manage_events, theme: 'bootstrap-5', pagination_class: "mt-4 pagination-sm flex-wrap justify-content-center" %>]
  <% else %>
    <div class="not-event-list-container">
      <h1  class="not-manage-event-title">登録されたイベント情報がありません。</h1><br />
      <div class="transition-event-create">
        <h2 class="transition-guidance">イベントの作成はこちらのボタンから</h2><br />
        <a href="/events/new" class="transition-event-create-button text-decoration-none" data-turbo="false">
          <span class="button-text">イベント作成</span>
        </a>
      </div>
    </div>
  <% end %>
<% end %>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const eventTrashIcon = document.querySelectorAll(".trash-icon");
  const eventDeleteButton = document.querySelectorAll(".delete-button");
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  let eventId = null;
  let eventCard = null;

  //削除アイコンをクリックした時、モーダル表示
  if (!eventTrashIcon){ return false; }
  eventTrashIcon.forEach(button => {
    button.addEventListener('click', () => {
      try {
        eventCard = button.closest(".card");
        eventId = eventCard.getAttribute("data-event-id");
        const eventName = eventCard.getAttribute("data-event-name");
        const modalMessage = document.getElementById("modal-message");
        const dataMessage = eventCard.getAttribute("data-message");
        const fullMessage = `${eventName}${dataMessage}`;
        modalMessage.textContent = fullMessage;
      } catch(e) {
        console.error( e.name, e.message );
      }
    })
  });

  //削除ボタンを押して、非同期でDELETEリクエスト送信
  if (!eventDeleteButton){ return false; }
  eventDeleteButton.forEach(button => {
    button.addEventListener('click', async() => {
      try {
        if(!eventId) { return false; }

        const url = `<%= ENV['DEVELOPMENT_URL'] %>/events/${eventId}`;

        const response = await fetch(url, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'X-CSRF-Token': csrfToken
          },
        });

        const data = await response.json();

        if(response.ok) {
          eventCard.remove();
          displayFlashMessage(data);
        } else {
          displayFlashMessage(data);
        }
      } catch(e) {
        console.error( e.name, e.message );
      }
    })
  });

  //フラッシュメッセージを非同期で表示/非表示にする関数
  function displayFlashMessage(data) {
    const div = document.createElement('div');
    div.className = 'flash-message';
    div.textContent = data.message;

    const flashContainer = document.querySelector('.flash-message-container');
    flashContainer.appendChild(div);
    div.classList.add(data.message_type);

    //フラッシュメッセージの表示位置をページの高さとスクロール量に応じて調整
    let viewPort = window.innerHeight;
    let documentAllHeight = document.documentElement.scrollHeight;
    let scrollHeight = window.pageYOffset;

    if(scrollHeight < 500) {
      //ビューポートの高さとスクロール量の半分の高さ
      flashContainer.style.top = `${((viewPort + scrollHeight) / 2)}px`;
    } else if(scrollHeight > 500) {
      //HTML要素全体の高さとスクロール量から指定のpxを引いた、半分の高さ
      flashContainer.style.top = `${((documentAllHeight + scrollHeight - 200 ) / 2)}px`;
    } else {
      //ビューポートの高さの半分
      flashContainer.style.top = `${viewPort / 2}px`;
    }

    flashContainer.style.position = 'absolute';
    flashContainer.style.left = '50%';
    flashContainer.style.zIndex = 99;
    $(div).fadeOut(5000);
  };
});
</script>