<div class="flash-message-container">
  <%= render 'shared/flash_message' %>
</div>

<% if logged_in? %>
  <div class="loggedin-breadcrumbs">
    <%= render_breadcrumbs separator: ' > ' %>
  </div>

  <%= render 'shared/event_modal' %>

  <div class="title-container">
    <h1 class="title">イベント管理</h1>
  </div>

  <% if @manage_events.present? %>
    <div class="event-list-container <%= @manage_events.size == 1 ? 'card-one' : '' %>">
      <% @manage_events.each do |event| %>
        <div class="card shadow p-3 mb-5 bg-white rounded" id="event-card" data-event-id="<%= event.id %>" data-event-name="<%= event.name %>">
          <div class="card__inner">
            <% if event.image.attached? %>
              <%= image_tag event.image, class:"card__image" %>
            <% else %>
              <%= image_tag 'events/no_image.png', class:"card__image" %>
            <% end %>
            <div class="card__textbox">
              <div class="card__title">
                <%= event.name.truncate(33) %>
              </div>
              <div class="card__items">
                <%= link_to manage_category_events_path(category_id: event.category.id), class: "category-label", data: { turbo:false } do %>
                  <%= event.category.name.truncate(18) %>
                <% end %>
                <%= link_to manage_date_events_path(event_day: event.event_day), class:"eventday-container", data: { turbo:false } do %>
                  <p class="eventday-label">開催日:<span class="eventday-value"><%= event.event_day.strftime("%-m月%-d日") %></span></p>
                <% end %>
                <div class="card__button">
                  <%= link_to edit_event_path(event), class: 'edit-button text-dark', data: { turbo: false } do %>
                    <i class="fa fa-pencil-square-o" aria-hidden="true"></i>
                  <% end %>
                  <button type="button" id="event-trash-button" class="trash-button text-dark btn outline btn-primary" data-bs-toggle="modal" data-bs-target="#eventDeleteModal" data-turbo="false">
                    <i class="fa fa-trash" aria-hidden="true"></i>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      <% end %>
    </div>
    <%= paginate @manage_events, theme: 'bootstrap-5', pagination_class: "mt-4 pagination-sm flex-wrap justify-content-center" %>]
  <% else %>
    <div class="not-event-list-container">
      <h1  class="not-manage-event-title">登録されたイベント情報がありません。</h1><br />
      <div class="transition-event-create">
        <h2 class="transition-guidance">イベントの作成はこちらのボタンから</h2><br />
        <a href="/events/new" class="transition-event-create-button text-decoration-none" data-turbo="false">
          <span class="button-text">イベント作成</span>
        </a>
      </div>
    </div>
  <% end %>
<% end %>

<script>
document.addEventListener('DOMContentLoaded', () => {
  // const eventTrashIcon = document.getElementById('event-trash-button');
  const eventTrashIcon = document.querySelectorAll(".trash-button");
  let eventId = null;
  console.log("グローバル変数のeventId", eventId)


  //削除ボタンをクリックした時
  eventTrashIcon.forEach(button => {
    if (!eventTrashIcon){ return false; }
    button.addEventListener('click', () => {
      try {
        eventCard = button.closest('.card');
        console.log("eventCard", eventCard)
        eventId = eventCard.getAttribute('data-event-id');
        console.log("モーダルの中のeventId", eventId);
        const eventName = eventCard.getAttribute('data-event-name');
        console.log("eventName", eventName);
        const modalMessage = document.getElementById("modal-message");
        const fullMessage = `${eventName}を削除しますか？`;
        modalMessage.textContent = fullMessage;
        console.log(modalMessage.textContent);
      } catch(e) {
        throw new Error(e);
      }
    })
  });

  // const eventDeleteButton = document.getElementById('event-delete');
  const eventDeleteButton = document.querySelectorAll('.delete-button');

  // if (!eventDelete){ return false; }
    eventDeleteButton.forEach(button => {
  button.addEventListener('click', async() => {
    try {
      // const eventCard = document.getElementById('event-card');
      // const eventId = eventCard.getAttribute('data-event-id');
      console.log("eventDeleteの中", eventId);
      // const eventName = eventCard.getAttribute('data-event-name');
      // console.log(eventName);


      const url = `/events/${eventId}`;
      console.log(url);
        //イベントのidをサーバー側へ非同期で送信
      const response = await fetch(url, (eventId) => {
        method: 'DELETE'
        // body: JSON.stringify(eventId)
      })


        if(response.ok) {
          console.log("イベント削除成功");
          // const data = await response.json();
          // const dataEventName = data.response.event_name;
          // console.log("イベント名", dataEventName);
          // window.location.href = 'http://localhost:3000/manage/events';
          // window.location.reload();
          // window.location.replace('http://localhost:3000/manage/events');
          eventCard.remove();
        } else {
          // console.error("イベント削除失敗");
          const deleteError = response.message;
          console.log(deleteError);
        }
    } catch(e) {
      console.error( e.name, e.message );
    }
    })
  });
});

</script>